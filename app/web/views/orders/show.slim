- i18n.scope = :orders
- show_payment_box = !selected_order.nil? && selected_order.price_set? && !selected_order.paid?

.orders
  .order-list
    a.new-order> href="/orders/new"= t('btn_new_order')
    - orders.each do |order|
      == slim :'orders/_order_list_item', locals: { order: order, selected_order_id: selected_order.id }
  .order
    - if show_payment_box
      .order-price
        = t('label_order-price')
        br
        = selected_order.amount_left_to_be_paid.format
        form.payment-form action="/orders/#{selected_order.id}/pay" method="POST"
          script src="https://www.paypalobjects.com/api/checkout.js"
          input#paypal-authorize-data type='hidden' name='paypal_authorize_data'
          #paypal-button
          javascript:
            paypal.Button.render({
              env: "#{paypal_env}",
              client: {
                sandbox: "#{paypal_client_id}",
                production: "#{paypal_client_id}",
              },
              payment: function(data, actions) {
                return actions.payment.create({
                  transactions: [{
                    amount: {
                      total: "#{selected_order.amount_left_to_be_paid.format(symbol: '', decimal_mark: '.', thousands_separator: '')}",
                      currency: "#{selected_order.amount_left_to_be_paid.currency.iso_code}",
                    },
                    description: "#{t('text_order_desc', order_id: selected_order.id)}",
                  }],
                });
              },
              onAuthorize: function(data) {
                var serializedData = JSON.stringify(data);
                $('#paypal-authorize-data').val(serializedData).closest('form').submit();
              }
            }, '#paypal-button');

      - if selected_order.paid?
        .order-price= t('text_order_paid')

    .messages
      - if selected_order.nil?
        p.section.prompt= t('text_no_orders_yet')
      - else
        - selected_order.messages.each do |message|
          .message class=(message.from_user? ? 'guest' : 'me')
            = message.body
            small.time = message.created_at.strftime('%H:%M %d-%m-%Y')

        == slim :'orders/messages/_form', locals: { order: selected_order, errors: message_form_error }
